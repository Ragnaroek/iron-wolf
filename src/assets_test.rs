use super::assets::{carmack_expand};

// First test case from: https://moddingwiki.shikadi.net/wiki/Carmack_compression
// others are from: https://github.com/camoto-project/gamecompjs/blob/master/test/test-cmp-carmackize.js
#[test]
pub fn test_carmack_expand() {
	let cases = vec![
		("0 count example", 
			vec![0x00, 0xA7, 0x12, 0xEE, 0xFF, 0x00, 0xA8, 0x34, 0xCC, 0xDD], 
			vec![0x12, 0xA7, 0xEE, 0xFF, 0x34, 0xA8, 0xCC, 0xDD]),
		("near ptr before eof",
			vec![0x78, 0x56, 0x34, 0x12, 0x02, 0xA7, 0x02, 0x00, 0x01],
			vec![0x78, 0x56, 0x34, 0x12, 0x78, 0x56, 0x34, 0x12, 0x00, 0x01]),
		("near ptr at eof",
			vec![0x78, 0x56, 0x34, 0x12, 0x02, 0xA7, 0x02],
			vec![0x78, 0x56, 0x34, 0x12, 0x78, 0x56, 0x34, 0x12]),
		("far pointer before EOF",
			vec![0x78, 0x56, 0x34, 0x12, 0x00, 0x01, 0x00, 0x03, 0x02, 0xA8, 0x00, 0x01, 0x00, 0x01],
			vec![0x78, 0x56, 0x34, 0x12, 0x00, 0x01, 0x00, 0x03, 0x78, 0x56, 0x34, 0x12, 0x00, 0x01]),
		("far pointer at EOF",
			vec![0x78, 0x56, 0x34, 0x12, 0x00, 0x01, 0x00, 0x03, 0x02, 0xA8, 0x00, 0x01],
			vec![0x78, 0x56, 0x34, 0x12, 0x00, 0x01, 0x00, 0x03, 0x78, 0x56, 0x34, 0x12]),
		("escape near pointer",
			vec![0x78, 0x56, 0x34, 0x12, 0x00, 0xA7, 0x55, 0x00,0x01],
			vec![0x78, 0x56, 0x34, 0x12, 0x55, 0xA7, 0x00, 0x01]),
		("escape near pointer at EOF",
			vec![0x78, 0x56, 0x34, 0x12, 0x00, 0xA7, 0x55],
			vec![0x78, 0x56, 0x34, 0x12, 0x55, 0xA7]),
		("escape far pointer",
			vec![0x78, 0x56, 0x34, 0x12, 0x00, 0xA8, 0x55, 0x00, 0x01],
			vec![0x78, 0x56, 0x34, 0x12, 0x55, 0xA8, 0x00, 0x01]),
		("escape far pointer at EOF",
			vec![0x78, 0x56, 0x34, 0x12, 0x00, 0xA8, 0x55],
			vec![0x78, 0x56, 0x34, 0x12, 0x55, 0xA8]),
		("repeat word three times",
			vec![0x78, 0x56, 0x34, 0x12, 0x02, 0xA7, 0x02, 0x02, 0xA7, 0x02, 0x00, 0x01, 0x00, 0x01],
			vec![0x78, 0x56, 0x34, 0x12, 0x78, 0x56, 0x34, 0x12, 0x78, 0x56, 0x34, 0x12, 0x00, 0x01, 0x00, 0x01]),
		("incomplete word at EOF",
			vec![0x78, 0x56, 0x34, 0x12, 0x02, 0xA7, 0x02, 0x00, 0x01, 0x55],
			vec![0x78, 0x56, 0x34, 0x12, 0x78, 0x56, 0x34, 0x12, 0x00, 0x01, 0x55]),
	];

	for (desc, compressed, decompressed) in cases {
		let result = carmack_expand(&compressed, decompressed.len());
		assert_eq!(result, decompressed, "{}", desc);
	}
}